// Mocks generated by Mockito 5.0.7 from annotations
// in number_trivia/test/features/ghibliFilm/domain/repositories/mock/ghibli_film_local_data_source_mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia/features/ghibliFilm/data/datasources/ghibli_film_local_data_source.dart'
    as _i3;
import 'package:number_trivia/features/ghibliFilm/data/models/ghibli_film_model.dart'
    as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeGhibliFilmModel extends _i1.Fake implements _i2.GhibliFilmModel {}

/// A class which mocks [GhibliFilmLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGhibliFilmLocalDataSource extends _i1.Mock
    implements _i3.GhibliFilmLocalDataSource {
  MockGhibliFilmLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GhibliFilmModel> getLastGhibliFilm() =>
      (super.noSuchMethod(Invocation.method(#getLastGhibliFilm, []),
              returnValue:
                  Future<_i2.GhibliFilmModel>.value(_FakeGhibliFilmModel()))
          as _i4.Future<_i2.GhibliFilmModel>);
  @override
  _i4.Future<void> cacheGhibliFilm(_i2.GhibliFilmModel? filmToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheGhibliFilm, [filmToCache]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
